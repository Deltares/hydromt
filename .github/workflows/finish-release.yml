
name: Finalise a new release

on:
  pull_request:
    types:
    - closed
    branches:
    - 'release/**'

jobs:
  publish-docker:
    if: github.event.pull_request.merged == true
    name: Finalise docker (${{ matrix.flavour }}) release
    runs-on: ubuntu-24.04 # latest LTS release
    strategy:
      fail-fast: false
      matrix:
        flavour: ['min','slim','full']
    concurrency:
      group: NEW_RELEASE_DOCKER
      cancel-in-progress: false # don't abort while we might be creating a PR or something
    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/download-artifact@v4
        with:
          name: hydromt-docker-image

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ matrix.flavour }} image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: ${{ matrix.flavour }}
          push:  true
          tags: deltares/hydromt:${{ env.version }}-${{ matrix.flavour }}

      - name: Build and push latest image
        if: matrix.flavour == 'slim'
        uses: docker/build-push-action@v6
        with:
          context: .
          target: ${{ matrix.flavour }}
          push:  true
          tags: deltares/hydromt:${{ env.version }}, deltares/hydromt:latest

  publish-pypi:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: pypi-release-artifacts
          path: dist
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.9.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          verbose: true

  publish-docs:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
    - uses: actions/download-artifact@v4
      with:
          name: docs-release-artifacts
          path: docs/_build
    - name: Upload to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
        exclude_assets: .buildinfo,_sources/*,_examples/*.ipynb
        destination_dir: ./${{ env.DOC_VERSION }}
        keep_files: false
        full_commit_message: Deploy Release ${{ env.DOC_VERSION }} docs to GitHub Pages


  gh-release:
    needs:
      - publish-docker
      - publish-pypi
      - publish-docs
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Finalise PR
        run: |
            git pull
            git checkout main
            export RELEASE_VERSION=$(grep "version" hydromt/__init__.py | cut -d= -f 2 | tr -d "\" ")
            if [ -z "$RELEASE_VERSION" ]; then
              echo "could not determine release version"
              echo "detection result: $RELEASE_VERSION"
              exit 1 # somthing went very wrong
            fi
            ## seting up git
            git config user.name "GitHub Actions Bot"
            git config user.email "<>"
            git tag "v$RELEASE_VERSION"
            # post release stuff so we don't forget
            sed -i "s/v$RELEASE_VERSION/Unreleased\n==========\n\nNew\n---\n\nChanged\n-------\n\nFixed\n-----\n\nDeprecated\n----------\n\nv$RELEASE_VERSION/" docs/changelog.rst
            sed -i 's/__version__.*=.*"\(.*\)".*/__version__ = "\1.dev0"/' hydromt/__init__.py

            git add hydromt/__init__.py docs/changelog.rst
            git commit -m "Post release v$RELEASE_VERSION"
            awk '
              BEGIN { capture = 0; }
              # Match the first header and start capturing
              /^v[0-9]+\.[0-9]+\.[0-9]+.*$/ { if (capture == 0) { capture = 1; } else { exit; } }
              # Capture lines between headers
              capture { print; }
            ' docs/changelog.rst > release_notes.rst
            git push
            git push origin tag "v$RELEASE_VERSION"
            gh release create "v$RELEASE_VERSION" -F release_notes.rst -t "v$RELEASE_VERSION"
