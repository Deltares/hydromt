[build-system]
requires = ["flit_core >=3.4.0,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "hydromt"
authors = [
  { name = "Dirk Eilander", email = "dirk.eilander@deltares.nl" },
  { name = "Hélène Boisgontier", email = "helene.boisgontier@deltares.nl" },
  { name = "Sam Vente", email = "sam.vente@deltares.nl" },
]
dependencies = [
  "affine",            # Spatial rasterers affine transformations (bbox pixel coalision)
  "bottleneck",        # Spearmen rank computation
  "click",             # CLI configuration
  "dask",              # lazy computing
  "entrypoints",       # Provide access for Plugins
  "fsspec",            # general file systems utilities
  "geopandas>=0.10",   # pandas but geo, wraps fiona and shapely
  "mercantile",        # tile handling
  "numba",             # speed up computations (used in e.g. stats)
  "numpy>=1.20",       # pin necessary to ensure compatability with C headers
  "netcdf4",           # netcfd IO
  "packaging",         # compare versions of hydromt
  "rioxarray",         # wraps rasterio and xarray. Almost superceded by hydromt/raster.py
  "pandas",            # Dataframes
  "pyflwdir>=0.5.4",   # Hight models and derivatives
  "pyproj",            # projections for Coordinate reference systems
  "rasterio",          # raster wrapper around gdal
  "requests",          # donwload stuff
  "shapely>=2.0.0",    # geometry transforms
  "scipy",             # scientific utilities
  "tomli",             # parsing toml files
  "tomli-w",           # writing toml files
  "xarray",            # ndim data arrays
  "universal_pathlib", # provides path compatability between different filesystems
  "xmltodict",         # xml parser also used to read VRT
  "zarr",              # zarr
]

requires-python = ">=3.9"
readme = "README.rst"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Hydrology",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
]
dynamic = ['version', 'description']

[project.optional-dependencies]
io = [
  "gcsfs",    # google cloud file system
  "openpyxl", # excel IO
  "fastparquet", # parquet IO
  "pillow",   # image IO
  "rio-vrt",  # write VRT files
  "s3fs",     # S3 file system
]
extra = [
  "xugrid>=0.6.5", # xarray wrapper for mesh processing
  "matplotlib",    # plotting; required for slippy tiles
  "pyet",          # calc evapotraspiration, quite well used, used in all wflow models but domain specific
]
dev = [
  "black",       # linting
  "ruff",        # linting
  "pre-commit",  # linting
  "pip>=23.1.2", # needed for recursive dependencies
  "flit",        # needed to publish to pypi
  "twine",       # needed to publish to pypi
]
test = [
  "pytest>=2.7.3",  # testing framework
  "pytest-cov",     # test coverage
  "pytest-mock",    # mocking
  "pytest-timeout", # darn hanging tests
  "xugrid",
]
doc = [
  "nbsphinx",                     # build notebooks in docs
  "pydata-sphinx-theme",          # theme
  "sphinx",                       # build docks
  "sphinx_design",                # doc layout
  "sphinx_autosummary_accessors", # doc layout
  "hydromt[examples,extra]",      # examples are included in the docs
]
examples = [
  "jupyterlab",      # run examples in jupyter notebook
  "cartopy",         # plotting examples
  "notebook",        # jupyter integration
]

full = ["hydromt[io,extra,dev,test,doc,examples]"]
slim = ["hydromt[io,extra,examples]"]

[project.urls]
Documentation = "https://deltares.github.io/hydromt"
Source = "https://github.com/Deltares/hydromt"

[project.scripts]
hydromt = "hydromt.cli.main:main"

[tool.make_env]
channels = ["conda-forge"]
deps_not_in_conda = ["sphinx_autosummary_accessors", "sphinx_design", "pyet", "rio-vrt"]

[tool.black]
line-length = 88
target-version = ['py39']

[tool.ruff]
line-length = 88

# enable pydocstyle (E), pyflake (F) and isort (I), pytest-style (PT), bugbear (B)
select = ["E", "F", "I", "PT", "D", "B"]
ignore-init-module-imports = true
ignore = ["D211", "D213", "E741", "D105", "E712", "B904"]
exclude = ["docs"]

[tool.ruff.per-file-ignores]
"tests/**" = ["D103", "D100", "D104"]
"hydromt/__init__.py" = ["E402", "F401", "F403"]
"hydromt/workflows/__init__.py" = ["F403"]
"hydromt/stats/__init__.py" = ["F403"]
"hydromt/models/__init__.py" = ["F403", "F401", "F405"]
"hydromt/_compat.py" = ["F401"]
"tests/conftest.py" = ["E402"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.flit.sdist]
include = ["hydromt"]
exclude = ["docs", "examples", "envs", "tests", "binder", ".github"]

[tool.pytest.ini_options]
addopts = "--ff --timeout=120 "
testpaths = ["tests"]

filterwarnings = [
  "ignore:distutils Version classes are deprecated:DeprecationWarning",
  "ignore:getargs:DeprecationWarning",                                     # The 'u' format is deprecated. Use 'U' instead.
  "ignore:The *staticgeoms:DeprecationWarning",
  "ignore:The *staticmaps:DeprecationWarning",
  "ignore:The set_staticmaps:DeprecationWarning",
  "ignore:Adding a predefined data catalog:DeprecationWarning",
  "ignore:Shapely 2.0 is installed:UserWarning",
  "ignore:rasterio.errors.NotGeoreferencedWarning",                        # upstream issue with rasterio, see https://github.com/rasterio/rasterio/issues/2497
  "ignore:.*isinstance:numba.core.errors.NumbaExperimentalFeatureWarning", # soon to be solved upstream. see https://github.com/numba/numba/pull/8911
]
